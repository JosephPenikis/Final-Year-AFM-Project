import processing.core.PApplet;
import processing.core.PFont;
import processing.core.PGraphics;
import processing.core.PShape;
import processing.net.Client;
import processing.opengl.PGraphics2D;
import processing.opengl.PShader;

public class DataViewer {
	
	int locX, locY, dimX, dimY;
	
	int xSliceIndex = 128;
	int ySliceIndex = 128;
		
	boolean isOrtho = false;
	boolean viewport2Dto3D = false;
	
	PApplet parent;
	PGraphics pGraphic;
	
  // Initialiser
	DataViewer(PApplet p, int locX, int locY, int dimX, int dimY) {
		this.locX = locX;
		this.locY = locY;
		
		this.dimX = dimX;
		this.dimY = dimY;
		
		this.parent = p;
		
    // Create graphics object to draw to
		pGraphic = p.createGraphics(dimX, dimY);
	}
	
  // Causes graphics object to be redrawn
	public void updateGraphic(float[][] values, float maximum, float minimum) {
		
		if (maximum < minimum || maximum == minimum) return; // Case when no data
		
		pGraphic.beginDraw();
		
		pGraphic.clear();
				
		//p.smooth();
				
		pGraphic.stroke(0x00, 0x00, 0x00, 0x00);
		pGraphic.fill(0xff, 0x00, 0x00, 0xff);
		pGraphic.strokeWeight(0.0f);
		
		int width = PApplet.min(dimX, dimY);
	
    // Center image	
		pGraphic.translate(0.15f * dimX, 0.15f * dimY);
		
    // Create 2D representation
		for (int i = 0; i < values[0].length - 1; i++) {
			pGraphic.beginShape(PApplet.QUAD_STRIP);
			for (int j = 0; j < values.length; j++) {				
  
        // Set color using Look-up table
				pGraphic.fill(gradientBezierInterpolation[(int)PApplet.floor(PApplet.map(values[j][i], minimum, maximum, 0, 0xff))] | 0xff000000);
				
        // Draw the rectangle
				pGraphic.rect(i, j, 1.0f, 1.0f);
				
				//p.vertex((0.1f + 0.8f * (i / (float)values[0].length)) * width, (0.1f + 0.8f * (j / (float)values[0].length)) * width);
				//p.vertex((0.1f + 0.8f * ((i + 1) / (float)values[0].length)) * width, (0.1f + 0.8f * (j / (float)values[0].length)) * width);
			}
			pGraphic.endShape();
		}
				
		pGraphic.endDraw();
	}
	
	public void draw(int xSlice) {
		
		parent.pushMatrix();

		parent.translate(locX, locY);

    // Draw the red 'slice' indicator bar
		parent.strokeWeight(2.0f);
		parent.stroke(0xff, 0x00, 0x00, 0x7f);
		parent.line(0.15f * dimX + (float)xSlice, 0.1f * dimY, 0.15f * dimX + (float)xSlice, 0.2f * dimY + 255);

    // Draw the pre-rendered image to the display
		parent.image(pGraphic, 0, 0);

    // Draw the white border
		parent.stroke(0xff, 0xff, 0xff, 0xff);
		parent.fill(0x00, 0x00, 0x00, 0x00);
		parent.rect(0, 0, dimX, dimY);
		
		parent.popMatrix();
	}
	
	int[] gradientBezierInterpolation = {
			0x000000, 0x060100, 0x0b0301, 0x100401, 0x130602, 0x170702, 0x190903, 0x1c0b03, 0x1e0c03,
			0x200d04, 0x220f04, 0x251005, 0x271105, 0x291106, 0x2b1206, 0x2d1307, 0x2f1407, 0x321408, 
			0x341508, 0x361609, 0x381609, 0x3a1709, 0x3d180a, 0x3f190a, 0x41190b, 0x431a0b, 0x451b0b, 
			0x481c0c, 0x4a1d0c, 0x4c1e0c, 0x4e1e0d, 0x501f0d, 0x52200d, 0x54210e, 0x57220e, 0x59230e, 
			0x5b240e, 0x5d250e, 0x5f260f, 0x61260f, 0x63270f, 0x65280f, 0x67290f, 0x692a0f, 0x6b2b0f, 
			0x6d2c10, 0x6f2e10, 0x712f10, 0x733010, 0x753110, 0x773210, 0x793310, 0x7b3411, 0x7d3511, 
			0x7f3611, 0x813711, 0x833811, 0x853a11, 0x863b12, 0x883c12, 0x8a3d12, 0x8c3e12, 0x8e4012, 
			0x904113, 0x914213, 0x934313, 0x954413, 0x974613, 0x984714, 0x9a4814, 0x9c4914, 0x9d4b14, 
			0x9f4c15, 0xa14d15, 0xa24f15, 0xa45016, 0xa65116, 0xa75216, 0xa95417, 0xaa5517, 0xac5617, 
			0xae5818, 0xaf5918, 0xb15a18, 0xb25c19, 0xb45d19, 0xb55e19, 0xb7601a, 0xb8611a, 0xb9621b, 
			0xbb641b, 0xbc651c, 0xbe661c, 0xbf681d, 0xc0691d, 0xc26b1e, 0xc36c1e, 0xc46d1f, 0xc66f1f, 
			0xc77020, 0xc87120, 0xca7321, 0xcb7422, 0xcc7522, 0xcd7723, 0xcf7823, 0xd07a24, 0xd17b25, 
			0xd27c25, 0xd37e26, 0xd47f27, 0xd68027, 0xd78228, 0xd88329, 0xd9852a, 0xda862a, 0xdb872b, 
			0xdc892c, 0xdd8a2d, 0xde8b2e, 0xdf8d2e, 0xe08e2f, 0xe18f30, 0xe29131, 0xe39232, 0xe49433, 
			0xe59533, 0xe69634, 0xe79835, 0xe79936, 0xe89a37, 0xe99c38, 0xea9d39, 0xeb9e3a, 0xec9f3b, 
			0xeda13c, 0xeda23d, 0xeea33e, 0xefa53f, 0xf0a640, 0xf0a741, 0xf1a942, 0xf2aa43, 0xf2ab44, 
			0xf3ac45, 0xf4ae46, 0xf4af48, 0xf5b049, 0xf6b14a, 0xf6b34b, 0xf7b44c, 0xf8b54d, 0xf8b64e, 
			0xf9b750, 0xf9b951, 0xfaba52, 0xfabb53, 0xfbbc55, 0xfbbd56, 0xfcbf57, 0xfcc058, 0xfdc15a, 
			0xfdc25b, 0xfec35c, 0xfec45d, 0xffc65f, 0xffc760, 0xffc861, 0xffc963, 0xffca64, 0xffcb65, 
			0xffcc67, 0xffcd68, 0xffce6a, 0xffcf6b, 0xffd06c, 0xffd16e, 0xffd26f, 0xffd371, 0xffd472,
			0xffd574, 0xffd675, 0xffd777, 0xffd878, 0xffd97a, 0xffda7b, 0xffdb7d, 0xffdc7e, 0xffdd80, 
			0xffde81, 0xffdf83, 0xffe084, 0xffe186, 0xffe288, 0xffe289, 0xffe38b, 0xffe48c, 0xffe58e, 
			0xffe690, 0xffe791, 0xffe793, 0xffe895, 0xffe996, 0xffea98, 0xffea9a, 0xffeb9c, 0xffec9d, 
			0xffed9f, 0xffeda1, 0xffeea3, 0xffefa4, 0xffefa6, 0xfff0a8, 0xfff1aa, 0xfff1ac, 0xfff2ad, 
			0xfff2af, 0xfff3b1, 0xfff4b3, 0xfff4b5, 0xfff5b7, 0xfff5b9, 0xfff6ba, 0xfff6bc, 0xfff7be, 
			0xfff7c0, 0xfff8c2, 0xfff8c4, 0xfff9c6, 0xfff9c8, 0xfff9ca, 0xfffacc, 0xffface, 0xfffbd0, 
			0xfffbd2, 0xfffbd4, 0xfffcd6, 0xfffcd8, 0xfffcda, 0xfffddc, 0xfffdde, 0xfffde0, 0xfffde3, 
			0xfffee5, 0xfffee7, 0xfffee9, 0xfffeeb, 0xfffeed, 0xfffeef, 0xfffff2, 0xfffff4, 0xfffff6,
			0xfffff8, 0xfffffb, 0xfffffd, 0xffffff
		};
}